name: android ci

on:
 push:
  branches: [ "master", "dev", "qa" ]
 pull_request:
  branches: [ "master", "dev", "qa", "feature/*", "release/*" ]


jobs:
 lint:
  runs-on: ubuntu-latest

  steps:
   - name: checkout the code
     uses: actions/checkout@v4

   - name: set up java jdk 17
     uses: actions/setup-java@v4
     with:
      java-version: '17'
      distribution: 'temurin'

   - name: stored with cache
     uses: actions/cache@v4
     with:
      path: |
          ~/.gradlew/caches
      key: ${{runner.os}}-gradle-${{ hashfiles ('**/*gradle*')}}

   - name: gradle excute permission
     run: chmod +x gradlew

   - name: Run lint
     run: ./gradlew lint

   - name: upload lint result  
     uses: actions/upload-artifact@v4
     with:
      name: lint-result
      path: app/build/reports/lint-results*.html


 unit-test:
  needs: [lint]
  runs-on: ubuntu-latest

  steps:
   - name: checkout the code
     uses: actions/checkout@v4

   - name: set up jdk 17
     uses: actions/setup-java@v4
     with:
      java-version: '17'
      distribution: 'temurin'

   - name: stored with cache
     uses: actions/cache@v4
     with:
      path: ~/.gradlew/caches
      key: ${{runner.os}}-gradle-${{ hashfiles ('**/*gradle*') }}

   - name: grant execute permission 
     run: chmod +x gradlew

   - name: Run unit tests
     run: ./gradlew test

   - name: upload artifact
     uses: actions/upload-artifact@v4
     with:
      name: test result
      path: app/build/reports/tests


 build:
  needs: [lint, unit-test]
  runs-on: ubuntu-latest

  steps:
   - name: checkout the code
     uses: actions/checkout@v4

   - name: set up jdk 17
     uses: actions/setup-java@v4
     with:
      java-version: '17'
      distribution: 'temurin'

   - name: cache for storage
     uses: actions/cache@v4
     with:
      path: ~/.gradlew/caches
      key: ${{runner.os}}-gradle-${{ hashfiles ('**/*gradlew*') }} 

   - name: grant execute permission for gradlew
     run: chmod +x gradlew

   - name: build debug apk
     run: ./gradlew assembleDebug

   - name: upload debug apk
     uses: actions/upload-artifact@v4
     with:
      name: debug-apk
      path: app/build/outputs/apk/debug/*.apk


 version-and-release:
   needs: build
   permissions: 
    contents: write
   runs-on: ubuntu-latest

   steps:
    - name: checkout the code 
      uses: actions/checkout@v4

    - name: set up java jdk 17
      uses: actions/setup-java@v4
      with:
       java-version: 17
       distribution: 'temurin'

    - name: Bump Version Code and Name
      id: bump_version
      run: |
        VERSION_NAME=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
        VERSION_NAME=${LATEST_TAG#v}  # Remove 'v' prefix if exists
        VERSION_CODE=$((10000 + $(git rev-list --count HEAD)))
    
        sed -i "s/versionCode = .*/versionCode = $VERSION_CODE/" app/build.gradle.kts
        sed -i "s/versionName = \".*\"/versionName = \"$VERSION_NAME\"/" app/build.gradle.kts
    
        echo "version=$VERSION_NAME" >> $GITHUB_OUTPUT
        echo "build=$VERSION_CODE" >> $GITHUB_OUTPUT

    - name: Commit and Push Version Bump
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add app/build.gradle.kts
        git commit -m "Bump version to ${{ steps.bump_version.outputs.version }} (build ${{ steps.bump_version.outputs.build }}) [skip ci]" || exit 0
        git push


    - name: Generate branch-based release notes
      id: notes
      run: |
          BRANCH_NAME="${GITHUB_REF##*/}"
          VERSION=${{ steps.bump_version.outputs.version }}
          PROJECT="${{ env.PROJECT_NAME }}"
          if [[ "$BRANCH_NAME" == "dev" ]]; then
            NOTES="Release for DEV branch\n\nProject: $PROJECT\nVersion: $VERSION\n\nCommits:\n"
            NOTES+=$(git log --pretty=format:"- %h %s (%an)" -10)
          elif [[ "$BRANCH_NAME" == "qa" ]]; then
            NOTES="QA Release\n\nProject: $PROJECT\nVersion: $VERSION"
          else
            NOTES="Production release version $VERSION"
          fi
          echo "$NOTES"
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV     
     
 
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
          tag_name: ${{ steps.bump_version.outputs.version }}
          name: Release ${{ steps.bump_version.outputs.version }}
          body: RELEASE_NOTES.md
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
